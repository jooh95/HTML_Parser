options{  static = false;}PARSER_BEGIN(MyNewGrammar)package Test;
import java.io.*;
import java.util.Scanner;
public class MyNewGrammar{  static final int HTML = 1, HEAD = 2, LINK = 3, BODY = 4, P = 5, SPAN = 6, IMG = 7, DIV = 8, TABLE = 9,  TR = 10, TH = 11, TD = 12, FORM = 13, INPUT =14, MAX = 200;  static int[] tags, startingTags;  static int result;  static boolean valid = true;    public static void main(String args [])  {    tags = new int[MAX];    startingTags = new int[MAX];    
    try {
		File file = new File("C:\\Users\\CAU\\Desktop\\HW01\\ex06\\ex06.html"); //set your own file path
		 Scanner sc = new Scanner(file);
		 while(sc.hasNextLine()) {
			 MyNewGrammar parser = new MyNewGrammar(System.in);			 result = (int) eval(sc.nextLine().replaceAll(" ", ""));			 			countTags();							 //System.out.println(eval(sc.nextLine().replaceAll(" ", "")));//			 System.out.println(result);
		 }		validateCheck();
		 if(valid) {
			System.out.println("Parsing Complete!");			showTagCounts();
		 }
		 else {
			System.out.println("Parsing Error!");
		 }
    }
    catch(Exception e) {
		System.out.println("Parsing Error!");
   	 }
	}	public static void validateCheck() {		for(int i = 0; i < MAX / 4; i++) {//		   System.out.println("start:" + i + " " + startingTags[i]);
			if(startingTags[i] != 0 && valid == true) {				valid = false;				break;			}			//valid = true;		 }	}	
	public static long eval(String state){
		Reader reader = new StringReader(state);

		try {
			return new MyNewGrammar(reader).exp();

		}
		catch(Exception e) {
			return -1;
		}
		finally {
			 try { reader.close(); } catch(Exception e) {}
		}
	}	  public static void showTagCounts() {	for(int i = 1; i < MAX / 2; i++) {			if(tags[i] != 0) {			  switch (i) {			    case HTML:			    	System.out.print("<HTML> ");					System.out.println(tags[i]);			    	break;			    case HEAD:			   		System.out.print("<HEAD> ");					System.out.println(tags[i]);			    	break;			    case LINK:			    	System.out.print("<LINK> ");					System.out.println(tags[i]);					break;				case BODY:			    	System.out.print("<BODY> ");					System.out.println(tags[i]);			    	break;			    case P:			   		System.out.print("<P> ");					System.out.println(tags[i]);			    	break;			    case SPAN:			    	System.out.print("<SPAN> ");					System.out.println(tags[i]);			    	break;			    case IMG:			    	System.out.print("<IMG> ");					System.out.println(tags[i]);					break;				case DIV:			    	System.out.print("<DIV> ");					System.out.println(tags[i]);			    	break;			    case TABLE:			   		System.out.print("<TABLE> ");					System.out.println(tags[i]);			    	break;			    case TR:			    	System.out.print("<TR> ");					System.out.println(tags[i]);					break;				case TH:			    	System.out.print("<TH> ");					System.out.println(tags[i]);			    	break;			    case TD:			   		System.out.print("<TD> ");					System.out.println(tags[i]);			    	break;			    case FORM:			    	System.out.print("<FROM> ");					System.out.println(tags[i]);					break;				case INPUT:			    	System.out.print("<INPUT> ");					System.out.println(tags[i]);			    	break;			  }			}   } }    public static void countTags() {    for(int i = 1; i < MAX / 4; i++) {      if(result == i) {				tags[i]++;		}		else if(result == (i + 100)) {				startingTags[i]++;		}		else if(result == (i + 50) && startingTags[i] != 0) {		 	tags[i]++;			startingTags[i]--;		}		else if(result == (i + 50) && startingTags[i] == 0) {			valid = false;//			System.out.println("r: " + result);
//			System.out.println("s: " + startingTags[i]);
		}    }  }}PARSER_END(MyNewGrammar)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* Define tags */{  < HTMLt : ("<html>")((["A"-"Z", "a"-"z", "0"-"9", "\"", ".", "=", "/", ":", "?", ",", "(", ")", "-", "_", "+", "#", "!", "@", "#", "$", "%", "$", "%", "^", "&", "*"])?)+("</html>") >
| < HTMLSTART : ("<html")((["A"-"Z", "a"-"z", "0"-"9", "!"-"/", ":"-";", "["-"_", "{"-"~", ">"])?) >
| < HTMLEND : ("</html>")((["A"-"Z", "a"-"z", "0"-"9", "!"-"/", ":"-";", "["-"_", "{"-"~"])?) >| < HEADt : ("<head>")((["A"-"Z", "a"-"z", "0"-"9", "\"", ".", "=", "/", ":", "?", ",", "(", ")", "-", "_", "+", "#", "!", "@", "#", "$", "%", "$", "%", "^", "&", "*"])?)+("</head>") >| < HEADSTART : ("<head")((["A"-"Z", "a"-"z", "0"-"9", "!"-"/", ":"-"=", "["-"_", "{"-"~", ">"])?) >| < HEADEND : ("</head>")((["A"-"Z", "a"-"z", "0"-"9", "!"-"/", ":"-"@", "["-"_", "{"-"~"])?) >
| < LINKt : ("<link")((["A"-"Z", "a"-"z", "0"-"9", "\"", ".", "=", "/", ":", "?", ",", "(", ")", "-", "_", "+", "#", "!", "@", "#", "$", "%", "$", "%", "^", "&", "*"])?)+(">") >
| < BODYt : ("<body>")((["A"-"Z", "a"-"z", "0"-"9", "\"", ".", "=", "/", ":", "?", ",", "(", ")", "-", "_", "+", "#", "!", "@", "#", "$", "%", "$", "%", "^", "&", "*"])?)+("</body>") >| < BODYSTART : ("<body")((["A"-"Z", "a"-"z", "0"-"9", "!"-"/", ":"-"@", "["-"_", "{"-"~", ">"])?) >| < BODYEND : ("</body>")((["A"-"Z", "a"-"z", "0"-"9", "!"-"/", ":"-"@", "["-"_", "{"-"~"])?) >
| < Pt : ("<p>")((["A"-"Z", "a"-"z", "0"-"9", "\"", ".", "=", "/", ":", "?", ",", "(", ")", "-", "_", "+", "#", "!", "@", "#", "$", "%", "$", "%", "^", "&", "*"])?)+("</p>") >| < PSTART : ("<p")((["A"-"Z", "a"-"z", "0"-"9", "\"", ".", "=", "/", ":", "?", ",", "(", ")", "-", "_", "+", "#", "!", "@", "#", "$", "%", "$", "%", "^", "&", "*"])?)+(">") >| < PEND : ("</p>")((["A"-"Z", "a"-"z", "0"-"9", "!"-"/", ":"-"@", "["-"_", "{"-"~"])?) >| < SPANt : ("<span")((["A"-"Z", "a"-"z", "0"-"9", "!"-"/", ":"-"@", "["-"_", "{"-"~"])?)+("</span>") >
| < IMGt : ("<img")((["A"-"Z", "a"-"z", "0"-"9", "\"", ".", "=", "/", ":", "?", ",", "(", ")", "-", "_", "+", "#", "!", "@", "#", "$", "%", "$", "%", "^", "&", "*"])?)+(">") >| < DIVt : ("<div>")((["A"-"Z", "a"-"z", "0"-"9", "\"", ".", "=", "/", ":", "?", ",", "(", ")", "-", "_", "+", "#", "!", "@", "#", "$", "%", "$", "%", "^", "&", "*"])?)+("</div>") >| < DIVSTART : ("<div")((["A"-"Z", "a"-"z", "0"-"9", "\"", ".", "=", "/", ":", "?", ",", "(", ")", "-", "_", "+", "#", "!", "@", "#", "$", "%", "$", "%", "^", "&", "*"])?)+(">")>| < DIVEND : ("</div>")((["A"-"Z", "a"-"z", "0"-"9", "!"-"/", ":"-"@", "["-"_", "{"-"~"])?)>| < TABLESTART : ("<table")((["A"-"Z", "a"-"z", "0"-"9", "!"-"/", ":"-"@", "["-"_", "{"-"~", ">"])?)>| < TABLEEND : ("</table>")((["A"-"Z", "a"-"z", "0"-"9", "!"-"/", ":"-"@", "["-"_", "{"-"~"])?)>| < TRSTART : ("<tr")((["A"-"Z", "a"-"z", "0"-"9", "!"-"/", ":"-"@", "["-"_", "{"-"~", ">"])?)>| < TREND : ("</tr>")((["A"-"Z", "a"-"z", "0"-"9", "!"-"/", ":"-"@", "["-"_", "{"-"~"])?)>| < THt : ("<th>")((["A"-"Z", "a"-"z", "0"-"9", "\"", ".", "=", "/", ":", "?", ",", "(", ")", "-", "_", "+", "#", "!", "@", "#", "$", "%", "$", "%", "^", "&", "*"])?)+("</th>") >| < TDt : ("<td>")((["A"-"Z", "a"-"z", "0"-"9", "\"", ".", "=", "/", ":", "?", ",", "(", ")", "-", "_", "+", "#", "!", "@", "#", "$", "%", "$", "%", "^", "&", "*"])?)+("</td>") >| < FORMSTART : ("<form")((["A"-"Z", "a"-"z", "0"-"9", "!"-"/", ":"-"@", "["-"_", "{"-"~"])?)+(">") >| < FORMEND :("</form>")((["A"-"Z", "a"-"z", "0"-"9", "!"-"/", ":"-"@", "["-"_", "{"-"~"])?)>| < INPUTt : ("<input")((["A"-"Z", "a"-"z", "0"-"9", "\"", ".", "=", "/", ":", "?", ",", "(", ")", "-", "_", "+", "#", "!", "@", "#", "$", "%", "$", "%", "^", "&", "*"])?)+(">") >| < IGNORE :  ["A"-"Z", "a"-"z", "0"-"9", "\"", ".", "=", "/", ":", "?", ",", "(", ")", "-", "_", "+", "#", "!", "@", "#", "$", "%", "$", "%", "^", "&", "*", "<", ">", ":", "{", "}", "[", "]"] >}

int exp():
{	Token html, htmlStart, htmlEnd;
	Token head, headStart, headEnd;
	Token link;
	Token body, bodyStart, bodyEnd;
	Token p, pStart, pEnd;
	Token span;	Token img;	Token div, divStart, divEnd;	Token table, tableStart, tableEnd;	Token tr, trStart, trEnd;	Token th, td;	Token form, formStart, formEnd;	Token input;
	Token ignore;
}
{	html = < HTMLt > <EOF >
	{
		return 1;
	}
|	htmlStart = < HTMLSTART ><EOF >	{		return 101;	}|	htmlEnd = < HTMLEND ><EOF >	{		return 51;	}| 
	head = < HEADt ><EOF >
	{
		return 2;
	}|	headStart = < HEADSTART ><EOF >	{
		return 102;	}|	headEnd = < HEADEND ><EOF >	{
		return 52;	}
|
	link = < LINKt ><EOF >
	{
		return 3;
	}
|
	body = < BODYt ><EOF >
	{
		return 4;
	}|	bodyStart = < BODYSTART ><EOF >	{
		return 104;	}|	bodyEnd = < BODYEND ><EOF >	{
		return 54;	}
|
	p = < Pt ><EOF >
	{
		return 5;
	}|	pStart = < PSTART ><EOF >	{
		return 105;	}|	pEnd = < PEND ><EOF >	{
		return 55;	}
|	span = < SPANt ><EOF >	{		return 6;	}|	img = < IMGt ><EOF >	{
		return 7;	}|	div = < DIVt ><EOF >	{
		return 8;	}|	divStart = < DIVSTART ><EOF >	{		return 108;	}|	divEnd = < DIVEND ><EOF >	{		return 58;	}|	tableStart = < TABLESTART ><EOF >	{		return 109;	}|	tableEnd = < TABLEEND ><EOF >	{		return 59;	}|	trStart = < TRSTART ><EOF >	{		return 110;	}|	trEnd = < TREND ><EOF >	{		return 60;	}|	th = < THt ><EOF >	{		return 11;	}|	td = < TDt ><EOF >	{		return 12;	}|	formStart = < FORMSTART ><EOF >	{
		return 113;	}|	formEnd = < FORMEND ><EOF >	{
		return 63;	}|	input = < INPUTt ><EOF >	{
		return 14;	}| 
	ignore = < IGNORE > <EOF >
	{
		return 0;
	}
}